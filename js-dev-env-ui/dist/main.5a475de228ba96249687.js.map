{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/whatwg-fetch/fetch.js","webpack:///./src/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/api/user-api.js","webpack:///./src/api/base-url.js","webpack:///./node_modules/numeral/numeral.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","fetch","support","searchParams","iterable","blob","Blob","e","formData","arrayBuffer","viewClasses","isDataView","obj","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","indexOf","toString","Headers","append","normalizeName","normalizeValue","oldValue","this","map","has","set","forEach","callback","thisArg","keys","items","push","iteratorFor","values","entries","iterator","methods","Request","clone","body","_bodyInit","Body","Response","status","statusText","headers","url","error","response","type","redirectStatuses","redirect","RangeError","location","input","init","Promise","resolve","reject","request","xhr","XMLHttpRequest","onload","options","rawHeaders","replace","split","line","parts","shift","trim","join","parseHeaders","getAllResponseHeaders","responseURL","responseText","onerror","TypeError","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","test","toLowerCase","next","done","undefined","Array","isArray","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","Error","rejected","then","text","readAsText","readBlobAsText","chars","length","fromCharCode","readArrayBufferAsText","decode","json","JSON","parse","upcased","toUpperCase","normalizeMethod","referrer","form","bytes","decodeURIComponent","bodyInit","ok","_userApi","getUsers","usersBody","user","id","firstName","lastName","email","global","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","row","parentNode","removeChild","courseValue","_numeral2","default","format","console","log","g","Function","eval","window","baseUrl","onSuccess","onError","del","href","results","RegExp","exec","getQueryStringParameterByname","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","number","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","regexps","unformat","match","stringToNumber","Number","version","numberToFormat","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","abbreviations","trillion","billion","million","thousand","toFixed","delimiters","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","len","k","arguments","multiplier","x","correctionFactor","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","localeData","reset","register","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","substr","fn","inputString","formatFunction","round","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","base","suffixes","binary","unformatRegex","concat","filter","item","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray"],"mappings":"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","file":"main.5a475de228ba96249687.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","import {getUsers, deleteUser} from './api/user-api';\nimport './index.css';\n\n// Populate table of users via API call.\ngetUsers().then(result => {\n  let usersBody = \"\";\n\n  result.forEach(user => {\n    usersBody+=\n      `<tr>\n        <td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\n        <td>${user.id}</td>\n        <td>${user.firstName}</td>\n        <td>${user.lastName}</td>\n        <td>${user.email}</td>\n      </tr>`\n  });\n\n  global.document.getElementById('users').innerHTML = usersBody;\n\n  const deleteLinks = global.document.getElementsByClassName('deleteUser');\n\n  // Must use array.from to create a real array from a DOM collection\n  // getElementsByClassName only returns an \"array like\" object\n  Array.from(deleteLinks, link => {\n    link.onclick = function(event) {\n      const element = event.target;\n      event.preventDefault();\n      deleteUser(element.attributes[\"data-id\"].value);\n      const row = element.parentNode.parentNode;\n      row.parentNode.removeChild(row);\n    };\n  })\n});\n\nimport numeral from 'numeral';\nconst courseValue = numeral(1000).format('$0,0.00');\n//debugger; // cannot get debugger statement to have any effect\nconsole.log(`I would pay ${courseValue} for this awesome course!`); //eslint-disable-line no-console\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import 'whatwg-fetch';\nimport getBaseUrl from './base-url';\n\nconst baseUrl = getBaseUrl();\n\nexport function getUsers() {\n  return get('users');\n}\n\nexport function deleteUser(id){\n  return del(`users/${id}`);\n}\n\nfunction get(url){\n  return fetch(baseUrl + url).then(onSuccess, onError);\n}\n\n// 'delete' is a reserved JS word\nfunction del(url){\n  const request = new Request(baseUrl + url, {\n    method: 'DELETE'\n  });\n\n  return fetch(request).then(onSuccess, onError);\n}\n\nfunction onSuccess(response){\n  return response.json();\n}\n\nfunction onError(error){\n  console.log(error); // eslint-disable-line no-console\n}\n\n// put\n\n// post\n\n// delete\n","export default function getBaseUrl() {\n  return getQueryStringParameterByname('useMockApi') ? 'http://localhost:3001/' : 'https://arcane-savannah-98696.herokuapp.com/';\n}\n\nfunction getQueryStringParameterByname(name, url){\n  if(!url) url = window.location.href;\n  name = name.replace(/[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url);\n  if (!results) return null;\n  if(!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"sourceRoot":""}